Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: /aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-ebs
  OksoftSG:
    Type: 'AWS::EC2::SecurityGroup::Id'
  KeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
  MyInstanceType:
    Type: String
    Default: m3.medium
    AllowedValues:
      - m3.medium
      - m3.xlarge
      - m3.2xlarge
      - i3.xlarge
Resources:
  MySpotFleet:
    Type: 'AWS::EC2::SpotFleet'
    Properties:
      SpotFleetRequestConfigData:
        TargetCapacity: 1
        Type: maintain
        IamFleetRole: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-ec2-spot-fleet-tagging-role'
        LaunchSpecifications:
          - ImageId: !Ref LatestAmiId
            KeyName: !Ref KeyName
            SecurityGroups:
              - GroupId: !Ref OksoftSG
            InstanceType: !Ref MyInstanceType
            BlockDeviceMappings:
              - DeviceName: /dev/xvda
                Ebs:
                  DeleteOnTermination: true
                  VolumeType: standard
                  VolumeSize: 400
            UserData: !Base64 
              'Fn::Join':
                - ''
                - - |
                    #!/bin/bash -xe
                  - >
                    yum install -y docker mysql git python-pip >
                    /tmp/line1_succ.txt 2> /tmp/line1_err.txt
                  - >
                    service docker start > /tmp/line2_succ.txt 2>
                    /tmp/line2_err.txt 
                  - >
                    echo 'india' | passwd ec2-user --stdin >
                    /tmp/line4a_succ.txt 2> /tmp/line4a_err.txt 
                  - >
                    sed -i 's|[#]*PasswordAuthentication
                    no|PasswordAuthentication yes|g' /etc/ssh/sshd_config >
                    /tmp/line4b_succ.txt 2> /tmp/line4b_err.txt 
                  - >
                    /etc/init.d/sshd restart > /tmp/line4d_succ.txt 2>
                    /tmp/line4d_err.txt
                  - >
                    /etc/init.d/sshd restart > /tmp/line4c_succ.txt 2>
                    /tmp/line4c_err.txt 
                  - >
                    docker run -d -p 8887:8888 -v /tmp:/tmp shantanuo/notebook >
                    /tmp/line3_succ.txt 2> /tmp/line3_err.txt 
                  - >-
                    pip install aws-ec2-assign-elastic-ip > /tmp/line4_succ.txt
                    2> /tmp/line4_err.txt 
                     
                  - 'sudo sh -c "echo '
                  - !ImportValue secretKey
                  - |2
                     >> /home/ec2-user/mysecret.txt" 
                  - 'sudo sh -c "echo '
                  - !ImportValue accessKey
                  - |2
                     >> /home/ec2-user/myaccesskey.txt" 
                  - >-
                    /usr/local/bin/aws-ec2-assign-elastic-ip --access-key ''`cat
                    /home/ec2-user/myaccesskey.txt`''  --secret-key ''`cat
                    /home/ec2-user/mysecret.txt`'' --valid-ips 18.210.57.140 >
                    /tmp/line5_succ.txt 2> /tmp/line5_err.txt


