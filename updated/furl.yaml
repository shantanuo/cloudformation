AWSTemplateFormatVersion: "2010-09-09"
Description: "My API Gateway and Lambda function"

Resources:
  apiGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "my-api2"
      Description: "My API"
  apiGatewayRootMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "GET"
      RequestParameters:
        method.request.querystring.url: false
      MethodResponses:
      - StatusCode: 200
        ResponseModels: { "application/json": "Empty" }
      Integration:
        IntegrationHttpMethod: "POST"
        RequestTemplates:
          application/json: "{\"url\": \"$input.params('url')\"}"
        PassthroughBehavior: WHEN_NO_TEMPLATES
        ContentHandling: CONVERT_TO_TEXT
        Type: "AWS"
        IntegrationResponses:
          - StatusCode: 200
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "lambdaFunction.Arn"

      ResourceId: !GetAtt "apiGateway.RootResourceId"
      RestApiId: !Ref "apiGateway"

  apiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "apiGatewayRootMethod"
    Properties:
      RestApiId: !Ref "apiGateway"
      StageName: mycall

  lambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          def handler(event,context):
            import urllib3
            import urllib.request
            import urllib.parse
            import json

            url = event['url']
            email = event.get('email', 'shantanu.oak@gmail.com')
            title = event.get('title', 'backup')

            url1 = urllib.parse.unquote(url)
            myfile = urllib.request.urlopen(url1)

            myfile_content = myfile.read()\
                .decode(myfile.headers
                        .get_content_charset(failobj='utf-8'))

            http = urllib3.PoolManager()
            url = "https://api.mailgun.net/v3/sandbox3d9e97b71bec47f9af3dfc3d994902e9x.mailgun.org/messages"

            params = {"from": "Excited User <excited-user@example.com>",
                      "to": email,
                      "subject": title,
                      "text": "Testing some awesomness with attachments!",
                      "html": myfile_content}

            auth_headers = urllib3.util.make_headers(
                basic_auth='api:key-082907a870ef09b66eb8bd2d50ada57301')

            r = http.request(
                "POST",
                url,
                headers=auth_headers,
                fields=params
            )

      Description: "My function"
      FunctionName: furl
      Handler: "index.handler"
      MemorySize: 128
      Role: !GetAtt "lambdaIAMRole.Arn"
      Runtime: "python3.6"
      Timeout: 10

  lambdaApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "lambdaFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/GET/"

  lambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/furl:*"
          PolicyName: "lambda"

  lambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/furl"
      RetentionInDays: 90

Outputs:
  apiGatewayInvokeURL:
    Value: !Sub "https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/mycall"

  lambdaArn:
    Value: !GetAtt "lambdaFunction.Arn"
